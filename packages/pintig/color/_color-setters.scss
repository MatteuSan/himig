// @license
// Copyright (c) 2025 MatteuSan
// SPDX-License-Identifier: MIT

@use '../theme';
@use '../tools';
@use 'sass:map';
@use 'sass:list';

@use 'color-utils' as util;
@use 'color-validators' as validator;

@mixin _base($component, $theme, $settings: ()) {
  $_init-settings: (intent: 'create');
  $_settings: map.merge($_init-settings, $settings);

  /// @type string
  $intent: map.get($_settings, 'intent');

  $fill: theme.theme-get($theme, 'fill');
  $ink: theme.theme-get($theme, 'ink');
  $border: theme.theme-get($theme, 'border');

  @if not tools.is-type($theme, 'map') {
    @error '$theme is expecting a map. Map was not given.';
  } @else {
    @include validator.validate-color-props(map.keys($theme)) {
      @if $fill {
        @include util.fill($component, $fill, $intent);
      }
      @if $ink {
        @include util.ink($component, $ink, $intent);
      }
      @if $border {
        @include util.border($component, $border, $intent);
      }
    }
  }
}

/// Mixin that applies color styles to a component.
/// @param {string} $component
/// @param {map<string, string>} $theme
/// @return {void} void.
@mixin apply($component, $theme) {
  @include _base($component, $theme);
}

/// Mixin that binds color styles to a component with existing keys.
/// @param {string} $component
/// @param {map<string, string>} $theme
/// @return {void} void.
@mixin bind($component, $theme) {
  @include _base($component, $theme, (
    'intent': bind
  ));
}