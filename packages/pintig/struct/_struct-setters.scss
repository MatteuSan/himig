//---------------------------------------------------
//  Copyright (c) 2024 MatteuSan
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
//---------------------------------------------------

@use '../theme';
@use '../tools';
@use 'sass:map';
@use 'sass:list';
@use 'struct-utils' as util;
@use 'struct-validators' as validator;

/// Base mixin for apply() and bind()
/// @access private
@mixin _base($component, $theme, $settings: ()) {
  $_init-settings: ('intent': create);
  $_settings: map.merge($_init-settings, $settings);

  /// @type string
  $intent: map.get($_settings, 'intent');

  $width: map.get($theme, 'width');
  $height: map.get($theme, 'height');
  $radius: theme.theme-get($theme, 'radius');
  $padding: theme.theme-get($theme, 'padding');
  $margin: theme.theme-get($theme, 'margin');
  $gap: theme.theme-get($theme, 'gap');
  $shadow: theme.theme-get($theme, 'shadow');
  $border-style: theme.theme-get($theme, 'border-style');
  $border-width: theme.theme-get($theme, 'border-width');

  @if tools.is-type($theme, 'map', $custom-error: '$theme is expecting a map. Map was not given.') {
    @include validator.validate-struct-props(map.keys($theme)) {
      @if $width {
        @include util.width($component, $width, $intent);
      }
      @if $height {
        @include util.height($component, $height, $intent);
      }
      @if $radius {
        @include util.radius($component, $radius, $intent);
      }
      @if $padding {
        @include util.padding($component, $padding, $intent);
      }
      @if $margin {
        @include util.margin($component, $margin, $intent);
      }
      @if $gap {
        @include util.gap($component, $gap, $intent);
      }
      @if $border-width {
        @include util.border-width($component, $border-width, $intent);
      }
      @if $border-style {
        @include util.border-style($component, $border-style, $intent);
      }
      @if $shadow {
        @include util.shadow($component, $shadow, $intent);
      }
    }
  }
}

/// Mixin that applies struct styles to a component.
/// @param {string} $component
/// @param {map<string, string>} $theme
/// @return {void} void.
@mixin apply($component, $theme) {
  @include _base($component, $theme);
}

/// Mixin that binds struct styles to a component with existing keys.
/// @param {string} $component
/// @param {map<string, string>} $theme
/// @return {void} void.
@mixin bind($component, $theme) {
  @include _base($component, $theme, (
    'intent': bind
  ));
}