//---------------------------------------------------
//  Copyright (c) 2024 MatteuSan
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
//---------------------------------------------------

@use 'sass:meta';
@use 'sass:string';

/// Public function for data type validation.
/// @param {*} $query
/// @param {string} $reference
/// @param {boolean} $errors
/// @return {boolean|error} true if matching, error/false if not.
@function is-type($query, $reference, $errors: true, $custom-error: null) {
  @if $errors != true {
    @return _validate-data-type($reference, $query);
  } @else {
    @if _validate-data-type($reference, $query) == false {
      @if not is-empty($custom-error) {
        @error $custom-error;
      }
      @error 'Invalid #{string.unquote($reference)}: #{$query}! Expecting a valid #{string.unquote($reference)}.';
    } @else {
      @return true;
    }
  }
}

/// Checks if query is empty.
/// @param {*} $query
/// @return {boolean} true if empty, false if not.
@function is-empty($query) {
  @if not $query
       or $query == ''
       or $query == ()
       or $query == none
       or $query == null
       or length($query) == 0 {
    @return true;
  }
  @return false;
}

/// Validates a data type on a given reference and query.
/// @access private
/// @param {string} $reference
/// @param {*} $query
/// @return {boolean} true if matching, false if not.
@function _validate-data-type($reference, $query) {
  @if meta.type-of($query) != string.unquote($reference) {
    @return false;
  }
  @return true;
}