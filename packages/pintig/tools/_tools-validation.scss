// @license
// Copyright (c) 2025 MatteuSan
// SPDX-License-Identifier: MIT

@use 'sass:list';
@use 'sass:meta';
@use 'sass:string';

/// Public function for data type validation.
/// @param {*} $query
/// @param {string} $reference
/// @param {boolean} $errors
/// @return {boolean|error} true if matching, error/false if not.
@function is-type($query, $reference, $errors: true, $custom-error: null) {
  @if $errors != true {
    @return _validate-data-type($reference, $query);
  } @else {
    @if _validate-data-type($reference, $query) == false {
      @if not is-empty($custom-error) {
        @error $custom-error;
      }
      @error 'Invalid #{string.unquote($reference)}: #{$query}! Expecting a valid #{string.unquote($reference)}.';
    } @else {
      @return true;
    }
  }
}

/// Checks if query is empty.
/// @param {*} $query
/// @return {boolean} true if empty, false if not.
@function is-empty($query) {
  @if not $query
       or $query == ''
       or $query == ()
       or $query == none
       or $query == null
       or list.length($query) == 0 {
    @return true;
  }
  @return false;
}

/// Validates a data type on a given reference and query.
/// @access private
/// @param {string} $reference
/// @param {*} $query
/// @return {boolean} true if matching, false if not.
@function _validate-data-type($reference, $query) {
  @if meta.type-of($query) != string.unquote($reference) {
    @return false;
  }
  @return true;
}