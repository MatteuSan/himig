// @license
// Copyright (c) 2025 MatteuSan
// SPDX-License-Identifier: MIT

@use '../theme';
@use '../tools';
@use 'sass:map';
@use 'sass:list';
@use 'typography-utils' as util;
@use 'typography-validators' as validator;

/// Base mixin for apply() and bind()
/// @access private
@mixin _base($component, $theme, $settings: ()) {
  $_init-settings: ('intent': create);
  $_settings: map.merge($_init-settings, $settings);

  /// @type string
  $intent: map.get($_settings, 'intent');

  $family: theme.theme-get($theme, 'family');
  $size: theme.theme-get($theme, 'size');
  $weight: theme.theme-get($theme, 'weight');
  $line-height: theme.theme-get($theme, 'line-height');
  $squeeze: theme.theme-get($theme, 'squeeze');

  @if tools.is-type($theme, 'map', $custom-error: '$theme is expecting a map. Map was not given.') {
    @include validator.validate-typography-props(map.keys($theme)) {
      @if $family {
        @include util.family($component, $family, $intent);
      }
      @if $size {
        @include util.size($component, $size, $intent);
      }
      @if $weight {
        @include util.weight($component, $weight, $intent);
      }
      @if $line-height {
        @include util.line-height($component, $line-height, $intent);
      }
      @if $squeeze {
        @include util.squeeze($component, $squeeze, $intent);
      }
    }
  }
}

/// Mixin that applies typography styles to a component.
/// @param {string} $component
/// @param {map<string, string>} $theme
/// @return {void} void.
@mixin apply($component, $theme) {
  @include _base($component, $theme);
}

/// Mixin that binds typography styles to a component with existing keys.
/// @param {string} $component
/// @param {map<string, string>} $theme
/// @return {void} void.
@mixin bind($component, $theme) {
  @include _base($component, $theme, (
    'intent': bind
  ));
}