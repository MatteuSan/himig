// @license
// Copyright (c) 2025 MatteuSan
// SPDX-License-Identifier: MIT

@use 'pkg:@matteusan/pintig';
@use 'sass:map';
@use 'sass:meta';
@use 'sass:list';
@use 'consts';
@use 'util-helpers' as helpers;

$_breakpoints: consts.$breakpoints;
$_variants: (
  'none',
  'auto',
  'xs',
  'sm',
  'md',
  'lg',
  'xl',
  '2xl',
  '3xl',
  '4xl',
  '5xl',
  '6xl',
);
$_directions: (
  't': top,
  'l': left,
  'b': bottom,
  'r': right,
  'x': (left, right),
  'y': (top, bottom)
);
$_r-directions: (
  'tl': top-left,
  'tr': top-right,
  'br': bottom-right,
  'bl': bottom-left,
  't': (top-left, top-right),
  'l': (top-left, bottom-left),
  'b': (bottom-left, bottom-right),
  'r': (top-right, bottom-right),
);
$_dimensions: (
  'none',
  'full',
  'xs',
  'sm',
  'md',
  'lg',
  'xl',
  'sprite',
);
$_stroke-size: (
  'none',
  'xs',
  'sm',
  'md',
  'lg',
  'xl'
);
$_stroke-style: (
  'none',
  'solid',
  'dashed',
  'dotted',
  'double'
);

@mixin struct($include: (), $exclude: ()) {
  $utils-to-render: helpers.handle-include-exclude((
    'w',
    'h',
    'p',
    'm',
    'r',
    'border-width',
    'border-style'
  ), $include, $exclude);

  @each $dimension in $_dimensions {
    @if list.index($utils-to-render, 'w') {
      // Width
      .w-#{$dimension} {
        width: pintig.primitive-token-get('width.#{$dimension}');
      }

      @each $breakpoint in $_breakpoints {
        .\@#{$breakpoint}\:w-#{$dimension} {
          @include pintig.breakpoint-create($breakpoint) {
            width: pintig.primitive-token-get('width.#{$dimension}') !important;
          }
        }
      }

      // Min Width
      .min-w-#{$dimension} {
        min-width: pintig.primitive-token-get('width.#{$dimension}');
      }

      @each $breakpoint in $_breakpoints {
        .\@#{$breakpoint}\:min-w-#{$dimension} {
          @include pintig.breakpoint-create($breakpoint) {
            min-width: pintig.primitive-token-get('width.#{$dimension}') !important;
          }
        }
      }

      // Max Width
      .max-w-#{$dimension} {
        max-width: pintig.primitive-token-get('width.#{$dimension}');
      }

      @each $breakpoint in $_breakpoints {
        .\@#{$breakpoint}\:max-w-#{$dimension} {
          @include pintig.breakpoint-create($breakpoint) {
            max-width: pintig.primitive-token-get('width.#{$dimension}') !important;
          }
        }
      }
    }

    @if list.index($utils-to-render, 'h') {
      // Height
      .h-#{$dimension} {
        height: pintig.primitive-token-get('height.#{$dimension}');
      }

      @each $breakpoint in $_breakpoints {
        .\@#{$breakpoint}\:h-#{$dimension} {
          @include pintig.breakpoint-create($breakpoint) {
            height: pintig.primitive-token-get('height.#{$dimension}') !important;
          }
        }
      }

      // Min Height
      .min-h-#{$dimension} {
        min-height: pintig.primitive-token-get('height.#{$dimension}');
      }

      @each $breakpoint in $_breakpoints {
        .\@#{$breakpoint}\:min-h-#{$dimension} {
          @include pintig.breakpoint-create($breakpoint) {
            min-height: pintig.primitive-token-get('height.#{$dimension}') !important;
          }
        }
      }

      // Max Height
      .max-h-#{$dimension} {
        max-height: pintig.primitive-token-get('height.#{$dimension}');
      }

      @each $breakpoint in $_breakpoints {
        .\@#{$breakpoint}\:max-h-#{$dimension} {
          @include pintig.breakpoint-create($breakpoint) {
            max-height: pintig.primitive-token-get('height.#{$dimension}') !important;
          }
        }
      }
    }
  }

  @each $variant in $_variants {
    @if list.index($utils-to-render, 'p') {
      // Padding
      .p-#{$variant} {
        padding: pintig.primitive-token-get('padding.#{$variant}');
      }

      @each $breakpoint in $_breakpoints {
        .\@#{$breakpoint}\:p-#{$variant} {
          @include pintig.breakpoint-create($breakpoint) {
            padding: pintig.primitive-token-get('padding.#{$variant}') !important;
          }
        }
      }

      @each $direction, $direction-val in $_directions {
        .p#{$direction}-#{$variant} {
          @each $sub-direction in $direction-val {
            padding-#{$sub-direction}: pintig.primitive-token-get('padding.#{$variant}');
          }
        }

        @each $breakpoint in $_breakpoints {
          .\@#{$breakpoint}\:p#{$direction}-#{$variant} {
            @include pintig.breakpoint-create($breakpoint) {
              @each $sub-direction in $direction-val {
                padding-#{$sub-direction}: pintig.primitive-token-get('padding.#{$variant}') !important;
              }
            }
          }
        }
      }
    }

    @if list.index($utils-to-render, 'm') {
      // Margin
      .m-#{$variant} {
        margin: pintig.primitive-token-get('margin.#{$variant}');
      }

      @each $breakpoint in $_breakpoints {
        .\@#{$breakpoint}\:m-#{$variant} {
          @include pintig.breakpoint-create($breakpoint) {
            margin: pintig.primitive-token-get('margin.#{$variant}') !important;
          }
        }
      }

      @each $direction, $direction-val in $_directions {
        .m#{$direction}-#{$variant} {
          @each $sub-direction in $direction-val {
            margin-#{$sub-direction}: pintig.primitive-token-get('margin.#{$variant}');
          }
        }

        @each $breakpoint in $_breakpoints {
          .\@#{$breakpoint}\:m#{$direction}-#{$variant} {
            @include pintig.breakpoint-create($breakpoint) {
              @each $sub-direction in $direction-val {
                margin-#{$sub-direction}: pintig.primitive-token-get('margin.#{$variant}') !important;
              }
            }
          }
        }
      }
    }

    @if list.index($utils-to-render, 'r') {
      // Border Radius
      @if $variant == 'auto' {
        // Do nothing
      } @else {
        .r-#{$variant} {
          border-radius: pintig.primitive-token-get('radius.#{$variant}');
        }

        @each $breakpoint in $_breakpoints {
          .\@#{$breakpoint}\:r-#{$variant} {
            @include pintig.breakpoint-create($breakpoint) {
              border-radius: pintig.primitive-token-get('radius.#{$variant}') !important;
            }
          }
        }

        @each $direction, $direction-val in $_r-directions {
          .r#{$direction}-#{$variant} {
            @each $sub-direction in $direction-val {
              border-#{$sub-direction}-radius: pintig.primitive-token-get('radius.#{$variant}');
            }
          }

          @each $breakpoint in $_breakpoints {
            .\@#{$breakpoint}\:r#{$direction}-#{$variant} {
              @include pintig.breakpoint-create($breakpoint) {
                @each $sub-direction in $direction-val {
                  border-#{$sub-direction}-radius: pintig.primitive-token-get('radius.#{$variant}') !important;
                }
              }
            }
          }
        }
      }
    }
  }

  @if list.index($utils-to-render, 'border-width') {
    @each $variant in $_stroke-size {
      // Border Width
      .border-#{$variant} {
        border-width: pintig.primitive-token-get('border.#{$variant}');
      }

      @each $breakpoint in $_breakpoints {
        .\@#{$breakpoint}\:border-#{$variant} {
          @include pintig.breakpoint-create($breakpoint) {
            border-width: pintig.primitive-token-get('border.#{$variant}') !important;
          }
        }
      }
    }
  }

  @if list.index($utils-to-render, 'border-style') {
    @each $variant in $_stroke-style {
      // Border Style
      .border-#{$variant} {
        border-style: $variant;
      }

      @each $breakpoint in $_breakpoints {
        .\@#{$breakpoint}\:border-#{$variant} {
          @include pintig.breakpoint-create($breakpoint) {
            border-style: $variant !important;
          }
        }
      }
    }
  }
}